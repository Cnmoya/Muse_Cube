Tutorial
========

Initializing
------------
Initializing is easy You must be in "ipython --pylab" enviroment.::

        from PyMUSE.musecube import MuseCube)
        cube = MuseCube(filename_cube, filename_white)

If for any reason you do not have the white image, you can still initialize the cube just typing::
        
        cube = MuseCube(filename_cube)

Get a spectrum
--------------

You can get an spectrum of a geometrical region by using::

    spectrum = cube.get_spec_from_ellipse_params(134, 219, 5, mode='wwm')

This ``spectrum`` is an ``XSpectrum1D`` object of the spaxels within a circle of radius 5 at position ``x,y=(134, 219)``

You can also define an elliptical aperture by using instead::

    spectrum = cube.get_spec_from_ellipse_params(134,219,[10,5,35], mode='wwm')

where ``[10,5,35]`` corresponds to the semimajor axis, semiminor axis and rotation angle respectively
You also may want to get the spectrum of a region defined by a single string line in DS9 format (e.g. see http//ds9.si.edu/doc/ref/region.html)
To do this, you can use the function::

    spectrum = cube.get_spec_from_region_string(region_string, mode = 'wwm')

In both of the ``get_spec()`` functions you can set ``save = True`` to save the spectrum to the hard_disk

Another extra feature is given by the  function::

    spectrum = cube.get_spec_and_image(center,halfsize,mode='wwm')

This code will, in addition of extract the spectrum given by ``center = (x,y)`` and halfsize either the radius of a circula/
region or a set of [a,b,theta] parameters defining an ellipse, will plot the spectrum and will show the source that is being analysed in a  subplot/

If you want to insert the input positions and semi-axes in degrees, you can set the coord_system parameter to wcs by adding::

        coord_system = 'wcs'

Finally, you are able to get the spectrum of a single spaxel of the cube by using::

    spectrum = cube.get_spec_spaxel(x,y,coord_system ='pix')

Again, you can set ``coord_system = 'wcs'`` if you want to insert an xy coordinate in degrees


Get a spectrum interactively
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
To use this feature, the class must have been initialized in a ``ipython --pylab qt`` enviroment
It's also needed the package roipoly. Installation instructions and LICENSE in
https//github.com/jdoepfert/roipoly.py/

This feature allows the user to interactively define a region in the canvas as a polygon. To do this::

    spectrum=cube.get_spec_from_interactive_polygon_region(mode='wwm')

This will turn interactive the canvas. To select the spaxel that will be the vertices of the region, just press left click on them/
When you have finished, just press right click and then enter to continue. The last vertex that you selected will link the first one to define the contour of the region.

Get the spectrum of a region defined in a DS9 .reg file
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
You also can define a region in a ds9 .reg file
The only thing needed is that the .reg file MUST be saved in physical coordinates. Once this is done, you can get the spectrum::

    spectrum = cube.get_spec_from_ds9regfile(regfile,mode='wwm')

Modes of spectrum extraction
----------------------------
As you have noted, all the diferent `get_spec_` functions have the keyword argument "mode". The mode availables to combine the spectrum of the diferent spaxels in a region ar/

              * ``ivar`` - Inverse variance weighting, variance is taken only spatially, from a "white variance images.
              * ``sum`` - Sum of total flux.
              * ``gaussian`` - Weighted mean. Weights are obtained from a 2D gaussian fit of the bright profil/
              * ``wwm`` - 'White Weighted Mean'. Weigted mean, weights are obtained from the white image, smoothed using a gaussian filter of sigma = npix. If npix=0, no smooth is done
              * ``ivarwv`` - Weighted mean, the weight of every pixel is given by the inverse of it's variance.
              * ``mean``  -  Mean of the total flux
              * ``median`` - Median of the total flux
              * ``wwm_ivarwv`` - Weights given by both, ``ivarwv`` and ``wwm``
              * ``wwm_ivar`` - Weghts given by both, ``wwm`` and ``ivar``
              * ``wfrac`` - It only takes the fraction ``frac`` of brightest spaxels (white) in the region.
                         (e.g. frac=0.1 means 10% brightest) with equal weights.
Note The gaussian method is not available in ``get_spec_from_ds9regfile()`` nor ``get_spec_from_interactive_polygon_region()``

Other keyword parameter
-----------------------
Also, all the ``get_spec_`` function have the keyword arguments ``npix`` , ``empirical_std``, ``n_figure`` and ``save``, ``frac``.

Some modes of extraction require a npix value (default = 0). This value correspond to the sigma of the gaussian function
that will smooth the white image, where the bright profile will be obtained. If npix = 0, no smooth is done.

The parameter ``frac`` (default = 0.1) will be used in mode = ``wfrac``, and it defines the fraction of brightest spaxels that will be considered in the sum of the flux.

If ``empirical_std = True`` (default = False) the uncertainties of the spectrum will be calculated empirically

``n_figure`` is the number of the figure that will display the new_spectrum

if ``save = True`` (default = False) The new spectrum extracted will be saved to the hard drive.


Read a spectrum saved by get_spec_method
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
If you used the ::
        save = True

Option, you saved the spectrum to the hard-disk as a fits file. To access the data you can use::

    from linetools.spectra.io import readspec
    spectrum = readspec('spectrum_fitsname')

This will create a ``XSpectrum1D`` object from the fits file. You can access to the spectrum wavelength, flux and sigma by typing ``spectrum.wavelength``, ``spectrum.flux`` and ``spectrum.sig``. Additional information on the ``XSpectrum1D`` Class can be found in `<https//github.com/linetools/linetools/blob/master/linetools/spectra/xspectrum1d.py>`_

Use a SExtractor output file as an input
----------------------------------------
The software allows the extraction and save of a set of sources detected in a SExtractor output files
To do this, you should have at least the next parameters in the SExtractor output file::
    * X_IMAGE
    * Y_IMAGE
    * A_IMAGE
    * B_IMAGE
    * THETA_IMAGE
    * FLAGS
    * NUMBER
    * MAG_AUTO

(Assuming that you ran SExtractor in the white image or any image with the same dimensions and astrometry of the cube/
First, to plot your regions, you can use::

    cube.plot_sextractor_regions('sextractor_filename', flag_threshold=32, a_min=3.5)

Where sextractor_filename is the name of the SExtractor's output. Every source with a SExtractor flag higher
than flag_threshold will be marked in red.

The a_min value correspond to the minimum number of spaxels that will have the semimajor axis of a regions
The original (a/b) ratio will be constant, but this set a minimum size for the elliptical apertures

Once you are satisfied with the regions that will be extracted, you can run::

    cube.save_sextractor_spec('sextractor_filename', flag_threshold=32, redmonster_format=True, a_min=3.5, n_figure=2,
                              mode='wwm', mag_kwrd='mag_r', npix=0, frac = 0.1)
This will save in the hard disk the spectra of all the sources defined in the sextractor_filename which flags be lower or equal than flag_threshold using the specified modes.
If ``redmonster_format = True``, the spectra will be saved in a format redeable for redmonster software `<http//www.sdss.org/dr13/algorithms/redmonster-redshift-measurement-and-spectral-classification/>`_
You can access to the data of a file writen in this format doing the next::
    import PyMUSE.utils as mc
    wv,fl,er = mcu.get_rm_spec(rm_spec_name)
where rm_spec_name is the name of the fits file.
Also, you can set the parameter ``mag_kwrd`` which by default is ``'mag_r'`` to the keyword in the new fits_image that wil/
contain the SExtractor's MAG_AUTO value.
It is possible the usage of a different image as an input for SExtractor. If this is the case, you should not use the
X_IMAGE, Y_IMAGE, A_IMAGE, B_IMAGE given by SExtractor (although they still must be included in the parameters list), because the spaxel-wcs conversion in the image given to SExtractor will be probably different to the conversion in the MUSE cube.  You may want to include the parameters::
    * X_WORLD
    * Y_WORLD
    * A_WORLD
    * B_WORLD
You also may want to be sure that the astrometry between the 2 images in consistent (on the other hand, the regions defined by SExtractor in the image will be shifted in the cube.
Once you included them in the parameters list, you should set the parameter ``wcs_coords = True`` in both functions::

    cube.plot_sextractor_regions('sextractor_filename', flag_threshold=32, a_min=3.5, wcs_coords=True)

to plot the regions and::

    cube.save_sextractor_spec('sextractor_filename', flag_threshold=32, redmonster_format=True, a_min=3.5, n_figure=2/
                              mode='wwm', mag_kwrd='mag_r', npix=0, frac = 0.1, wcs_coords = True)
to save them.


